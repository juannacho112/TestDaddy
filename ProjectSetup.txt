TestDaddy - Setup Instructions
============================

Prerequisites
------------
1. Node.js (Latest LTS version recommended)
2. MongoDB installed and running locally (or MongoDB Atlas account)
3. Solana-related accounts/access:
   - QuickNode endpoint or other Solana RPC endpoint
   - CoinGecko API key
   - Destination wallet address for receiving payments
4. Zapier/GoHighLevel webhook URL for CRM integration

Step-by-Step Setup
-----------------
1. Clone Repository
   ```bash
   git clone [repository-url]
   cd TestDaddy
   ```

2. Install Dependencies
   ```bash
   npm install
   ```

3. MongoDB Setup
   a. Local MongoDB Installation:
      - Install MongoDB Community Edition
      - Start MongoDB service
      - Create database named 'solana_pay'
      - Create user with read/write access to solana_pay database
   
   OR
   
   b. MongoDB Atlas Setup:
      - Create account at mongodb.com/cloud/atlas
      - Create new cluster
      - Create database user
      - Get connection string
      - Whitelist your IP address

4. Environment Configuration
   Create a .env.local file with the following variables:
   ```
   MONGODB_URI=mongodb://[username]:[password]@localhost:27017/solana_pay?authSource=solana_pay
   QUICKNODE_ENDPOINT=https://your-quicknode-endpoint-or-other-solana-rpc
   MY_DESTINATION_WALLET=YourSolanaWalletAddress
   COINGECKO_DEMO_API_KEY=YourCoinGeckoApiKey
   ZAPIER_WEBHOOK_URL=https://your-webhook-url
   ```

5. Domain Configuration (Optional)
   If using custom domain (e.g., sol.atcostmarketing.com):
   - Point A record to your server IP
   - Configure reverse proxy (nginx/apache) to port 3000
   - Update SSL certificates if needed

Running the Application
---------------------
1. Development Mode
   ```bash
   # Start both Next.js server and worker process
   npm run start
   
   # Or run separately:
   npm run dev        # Next.js server
   npm run worker     # Background worker
   ```

2. Production Mode
   ```bash
   # Build the application
   npm run build
   
   # Start the server
   npm run start
   ```

Verification Steps
----------------
1. Check MongoDB Connection
   ```bash
   # Test MongoDB connection
   node test-mongodb.ts
   ```

2. Verify Environment
   - Ensure MongoDB is running
   - Confirm all environment variables are set
   - Check Solana RPC endpoint access
   - Verify webhook URL is accessible

3. Test Payment Flow
   - Access frontend at http://localhost:3000
   - Create test payment
   - Check MongoDB for payment record
   - Verify worker process is running
   - Monitor worker logs for transaction verification

Troubleshooting
--------------
1. MongoDB Connection Issues
   - Verify MongoDB is running: `sudo systemctl status mongodb`
   - Check connection string in .env.local
   - Ensure IP whitelist includes your server (for Atlas)

2. Worker Process Issues
   - Check logs for errors
   - Verify Solana RPC endpoint is responsive
   - Ensure MongoDB connection is stable

3. Payment Verification Issues
   - Confirm QuickNode endpoint is active
   - Check worker logs for transaction lookup errors
   - Verify Solana Pay URL generation

4. Webhook Integration Issues
   - Test webhook URL accessibility
   - Check payload format in worker.ts
   - Verify CRM system is accepting requests

Security Notes
------------
1. Environment Variables
   - Keep .env.local secure and never commit to repository
   - Regularly rotate API keys and access tokens
   - Use strong MongoDB passwords

2. MongoDB Security
   - Enable authentication
   - Use specific database user with minimal permissions
   - Regular backup procedures recommended

3. Network Security
   - Configure firewall rules
   - Use SSL/TLS for all connections
   - Regular security updates

Maintenance
----------
1. Regular Updates
   - Keep Node.js updated
   - Update npm packages regularly
   - Monitor MongoDB version updates

2. Monitoring
   - Check worker logs daily
   - Monitor payment verification success rate
   - Track webhook delivery success

3. Backup Procedures
   - Regular MongoDB backups
   - Environment configuration backup
   - Documentation updates
